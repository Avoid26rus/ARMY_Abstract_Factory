#include <iostream>
using namespace std;

class Tank
{
public:
	virtual void info() = 0;
	virtual ~Tank() {}
};

class Armored_carrier
{
public:
	virtual void info() = 0;
	virtual ~Armored_carrier() {}
};

class Military_robot
{
public:
	virtual void info() = 0;
	virtual ~Military_robot() {}
};

class Artillery
{
public:
	virtual void info() = 0;
	virtual ~Artillery() {}
};

class Fighter_plane
{
public:
	virtual void info() = 0;
	virtual ~Fighter_plane() {}
};

// Классы всех видов воинов Российской армии
class Russian_Tank : public Tank
{
	int kolvo;
public:
	void info() {
		cout << "Russian_Tank kolvo=" << endl;
	}
};

class Russian_Armored_carrier : public Armored_carrier
{
public:
	void info() {
		cout << "Russian_Armored_carrier" << endl;
	}
};

class Russian_Military_robot : public Military_robot
{
public:
	void info() {
		cout << "Russian_Military_robot" << endl;
	}
};

class Russian_Artillery : public Artillery
{
public:
	void info() {
		cout << "Russian_Artillery" << endl;
	}
};

class Russian_Fighter_plane : public Fighter_plane
{
public:
	void info() {
		cout << "Russian_Fighter_plane" << endl;
	}
};

// Классы всех видов воинов армии США
class USA_Tank : public Tank
{
public:
	void info() {
		cout << "USA_Tank" << endl;
	}
};

class USA_Armored_carrier : public Armored_carrier
{
public:
	void info() {
		cout << "USA_Armored_carrier" << endl;
	}
};

class USA_Military_robot : public Military_robot
{
public:
	void info() {
		cout << "USA_Military_robot" << endl;
	}
};

class USA_Artillery : public Artillery
{
public:
	void info() {
		cout << "USA_Artillery" << endl;
	}
};

class USA_Fighter_plane : public Fighter_plane
{
public:
	void info() {
		cout << "USA_Fighter_plane" << endl;
	}
};


// Абстрактная фабрика для производства техники
class ArmyFactory
{
public:
	virtual Tank* create_Tank() = 0;
	virtual Armored_carrier* create_Armored_carrier() = 0;
	virtual Military_robot* create_Military_robot() = 0;
	virtual Artillery* create_Artillery() = 0;
	virtual Fighter_plane* create_Fighter_plane() = 0;
	virtual ~ArmyFactory() {}
};

// Фабрика для создания воинов Российской армии
class Russian_ArmyFactory : public ArmyFactory
{
public:
	Tank * create_Tank() {
		return new Russian_Tank;
	}
	Armored_carrier* create_Armored_carrier() {
		return new Russian_Armored_carrier;
	}
	Military_robot* create_Military_robot() {
		return new Russian_Military_robot;
	}
	Artillery* create_Artillery() {
		return new Russian_Artillery;
	}
	Fighter_plane* create_Fighter_plane() {
		return new Russian_Fighter_plane;
	}
};

class USA_ArmyFactory : public ArmyFactory
{
public:
	Tank * create_Tank() {
		return new USA_Tank;
	}
	Armored_carrier* create_Armored_carrier() {
		return new USA_Armored_carrier;
	}
	Military_robot* create_Military_robot() {
		return new USA_Military_robot;
	}
	Artillery* create_Artillery() {
		return new USA_Artillery;
	}
	Fighter_plane* create_Fighter_plane() {
		return new USA_Fighter_plane;
	}
};

// Класс, содержащий всю технику той или иной армии
class Army
{
private:

	friend class Cold_war;

	Tank** TA;
	Armored_carrier** AC;
	Military_robot** MR;
	Artillery** AR;
	Fighter_plane** FP;

	int TA_size;
	int AC_size;
	int MR_size;
	int AR_size;
	int FP_size;

public:

	Army() {
		TA = nullptr;
		AC = nullptr;
		MR = nullptr;
		AR = nullptr;
		FP = nullptr;
		
		TA_size = NULL;
		AC_size = NULL;
		MR_size = 5;//NULL;
		AR_size = NULL;
		FP_size = NULL;
		//TA_size = 15;
		//TA = new Tank*[TA_size];
		//for (int i = 0; i<TA_size; ++i)  cout << i <<"___" << TA[i] <<endl;
		MR = new Military_robot*[MR_size];
		for (int i = 0; i<MR_size; ++i)  cout << i <<"___" << MR[i] <<endl;
	}

	void add_tank() {

	}

	void info() {
		for (int i = 0; i < TA_size; ++i)  TA[i]->info();
		for (int i = 0; i < AC_size; ++i)  AC[i]->info();
		for (int i = 0; i < MR_size; ++i)  MR[i]->info();
		for (int i = 0; i < AR_size; ++i)  AR[i]->info();
		for (int i = 0; i < FP_size; ++i)  FP[i]->info();
	}

	~Army() {
		delete[] TA;
		delete[] AC;
		delete[] MR;
		delete[] AR;
		delete[] FP;
	}
};

// Здесь создается армия той или иной стороны
class Cold_war
{
public:
	Army * createArmy(ArmyFactory& factory) {
		Army* p = new Army;
		for (int i = 0; i < p->TA_size; ++i)  p->TA[i] = factory.create_Tank();
		for (int i = 0; i < p->AC_size; ++i)  p->AC[i] = factory.create_Armored_carrier();
		for (int i = 0; i < p->MR_size; ++i)  p->MR[i] = factory.create_Military_robot();
		for (int i = 0; i < p->AR_size; ++i)  p->AR[i] = factory.create_Artillery();
		for (int i = 0; i < p->FP_size; ++i)  p->FP[i] = factory.create_Fighter_plane();
		return p;
	}
};


int main()
{
	Cold_war cold_war;
	Russian_ArmyFactory RU_factory;
	USA_ArmyFactory US_factory;

	Army * RU = cold_war.createArmy(RU_factory);
	Army * US = cold_war.createArmy(US_factory);
	cout << "Russian army:" << endl;
	RU->info();
	cout << "\nUSA army:" << endl;
	US->info();

	system("pause");
}
